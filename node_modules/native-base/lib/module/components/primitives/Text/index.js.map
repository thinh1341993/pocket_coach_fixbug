{"version":3,"sources":["index.tsx"],"names":["StyledText","NativeText","TextAncestorContext","React","createContext","Text","ref","children","props","hasTextAncestor","useContext","resolveResponsively","componentTheme","undefined","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","propFontFamily","fontFamily","propFontWeight","fontWeight","propFontStyle","fontStyle","_hover","fontSize","numberOfLines","reslovedProps","_ref","isHovered","resolvedFontFamily","propsToSpread","bg","textDecorationLine"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledText = makeStyledComponent(NativeText);\n// To have a RN compatible behaviour, we'll inherit parent text styles as base style\nconst TextAncestorContext = React.createContext(false);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...reslovedProps\n  } = usePropsResolution(\n    'Text',\n    props,\n    {},\n    {\n      resolveResponsively: ['noOfLines', 'numberOfLines'],\n      // We override the component base theme if text has an ancestor.\n      componentTheme: hasTextAncestor ? {} : undefined,\n    }\n  );\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n    fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const propsToSpread = {\n    ...reslovedProps,\n    numberOfLines:\n      numberOfLines || noOfLines\n        ? numberOfLines || noOfLines\n        : isTruncated\n        ? 1\n        : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : reslovedProps.bg,\n    textDecorationLine:\n      underline && strikeThrough\n        ? 'underline line-through'\n        : underline\n        ? 'underline'\n        : strikeThrough\n        ? 'line-through'\n        : reslovedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover),\n  };\n\n  return hasTextAncestor ? (\n    <StyledText {...propsToSpread}>{children}</StyledText>\n  ) : (\n    <TextAncestorContext.Provider value={true}>\n      <StyledText {...propsToSpread}>{children}</StyledText>\n    </TextAncestorContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]}