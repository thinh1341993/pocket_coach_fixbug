{"version":3,"sources":["index.tsx"],"names":["AspectView","React","forwardRef","props","ref","useState","layout","setLayout","inputStyle","StyleSheet","flatten","style","width","height","push","aspectRatio","inLayout","nativeEvent","AspectRatio","resolveResponsively","ratio","children","resolvedProps","computedStyle","newChildWithProps","cloneElement","absoluteFillObject","Platform","OS","memo"],"mappings":"+bAAA,oDACA,yCACA,iEACA,2EACA,qC,uIAGA,GAAMA,CAAAA,UAAU,CAAGC,eAAMC,UAAN,CAAiB,SAACC,KAAD,CAAaC,GAAb,CAA2B,qBACjCH,eAAMI,QAAN,EADiC,iEACtDC,MADsD,qBAC9CC,SAD8C,qBAE7D,GAAMC,CAAAA,UAAU,CAAG,CAACC,wBAAWC,OAAX,CAAmBP,KAAK,CAACQ,KAAzB,GAAmC,EAApC,CAAnB,CACA,GAAIL,MAAJ,CAAY,mBAEsBA,MAFtB,CAEJM,KAFI,CAEJA,KAFI,wBAEI,CAFJ,8BAEsBN,MAFtB,CAEOO,MAFP,CAEOA,MAFP,yBAEgB,CAFhB,gBAGV,GAAID,KAAK,GAAK,CAAd,CAAiB,CACfJ,UAAU,CAACM,IAAX,CAAgB,CAAEF,KAAK,CAAEC,MAAM,CAAGV,KAAK,CAACY,WAAxB,CAAqCF,MAAM,CAANA,MAArC,CAAhB,EACD,CAFD,IAEO,CACLL,UAAU,CAACM,IAAX,CAAgB,CAAEF,KAAK,CAALA,KAAF,CAASC,MAAM,CAAED,KAAK,CAAGT,KAAK,CAACY,WAA/B,CAAhB,EACD,CACF,CAED,MACE,8BAAC,YAAD,0BACMZ,KADN,EAEE,GAAG,CAAEC,GAFP,CAGE,KAAK,CAAEI,UAHT,CAIE,QAAQ,CAAE,2BAA0BQ,CAAAA,QAA1B,MAAGC,WAAH,CAAkBX,MAAlB,OACRC,CAAAA,SAAS,CAACS,QAAD,CADD,EAJZ,8EADF,CAUD,CAvBkB,CAAnB,CAyBA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACf,KAAD,CAA2BC,GAA3B,CAAyC,yBACN,8BACnD,aADmD,CAEnDD,KAFmD,CAGnD,EAHmD,CAInD,CAAEgB,mBAAmB,CAAE,CAAC,OAAD,CAAvB,CAJmD,CADM,CACnDR,KADmD,qBACnDA,KADmD,CAC5CS,KAD4C,qBAC5CA,KAD4C,CACrCC,QADqC,qBACrCA,QADqC,CACxBC,aADwB,yFAO3D,GAAIC,CAAAA,aAAoC,CAAGZ,KAA3C,CACA,GAAIa,CAAAA,iBAAiB,CAAGvB,eAAMwB,YAAN,CACtBJ,QADsB,0BAGjBA,QAAQ,CAAClB,KAHQ,EAIpBQ,KAAK,CAAEF,wBAAWiB,kBAJE,GAMtBL,QAAQ,CAAClB,KAAT,CAAekB,QANO,CAAxB,CAUA,GAAI,iDAAsBC,aAAtB,CAAJ,CAA0C,CACxC,MAAO,KAAP,CACD,CAED,GAAIK,sBAASC,EAAT,GAAgB,KAApB,CAA2B,CACzB,MACE,8BAAC,UAAD,0BACMN,aADN,EAEE,WAAW,CAAEF,KAFf,CAGE,KAAK,CAAET,KAHT,CAIE,GAAG,CAAEP,GAJP,8EAMGoB,iBANH,CADF,CAUD,CAXD,IAWO,CACLD,aAAa,CAAGd,wBAAWC,OAAX,CAAmB,CAACC,KAAD,CAAQ,CAAEI,WAAW,CAAEK,KAAf,CAAR,CAAnB,CAAhB,CACA,MACE,8BAAC,YAAD,0BAASE,aAAT,EAAwB,KAAK,CAAEC,aAA/B,CAA8C,GAAG,CAAEnB,GAAnD,8EACGoB,iBADH,CADF,CAKD,CACF,CAzCD,C,aA2CevB,eAAM4B,IAAN,CAAW5B,eAAMC,UAAN,CAAiBgB,WAAjB,CAAX,C","sourcesContent":["import React from 'react';\nimport { StyleSheet, ViewStyle, Platform } from 'react-native';\nimport { default as Box } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks';\nimport type { IAspectRatioProps } from './types';\n\nconst AspectView = React.forwardRef((props: any, ref?: any) => {\n  const [layout, setLayout] = React.useState();\n  const inputStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    // @ts-ignore\n    let { width = 0, height = 0 } = layout;\n    if (width === 0) {\n      inputStyle.push({ width: height * props.aspectRatio, height });\n    } else {\n      inputStyle.push({ width, height: width / props.aspectRatio });\n    }\n  }\n\n  return (\n    <Box\n      {...props}\n      ref={ref}\n      style={inputStyle}\n      onLayout={({ nativeEvent: { layout: inLayout } }: any) =>\n        setLayout(inLayout)\n      }\n    />\n  );\n});\n\nconst AspectRatio = (props: IAspectRatioProps, ref?: any) => {\n  const { style, ratio, children, ...resolvedProps } = usePropsResolution(\n    'AspectRatio',\n    props,\n    {},\n    { resolveResponsively: ['ratio'] }\n  );\n  let computedStyle: ViewStyle | undefined = style;\n  let newChildWithProps = React.cloneElement(\n    children,\n    {\n      ...children.props,\n      style: StyleSheet.absoluteFillObject,\n    },\n    children.props.children\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web\n  if (Platform.OS === 'web') {\n    return (\n      <AspectView\n        {...resolvedProps}\n        aspectRatio={ratio}\n        style={style}\n        ref={ref}\n      >\n        {newChildWithProps}\n      </AspectView>\n    );\n  } else {\n    computedStyle = StyleSheet.flatten([style, { aspectRatio: ratio }]);\n    return (\n      <Box {...resolvedProps} style={computedStyle} ref={ref}>\n        {newChildWithProps}\n      </Box>\n    );\n  }\n};\n\nexport default React.memo(React.forwardRef(AspectRatio));\n"]}