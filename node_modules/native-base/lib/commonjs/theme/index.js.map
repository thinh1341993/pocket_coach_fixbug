{"version":3,"sources":["index.ts"],"names":["config","useSystemColorMode","initialColorMode","accessibleColors","theme","base","components"],"mappings":"sjBAAA,oDACA,gEACA,sD,yBA8BA,6CACA,8BArBA,GAAMA,CAAAA,MAAwB,CAAG,CAC/BC,kBAAkB,CAAE,KADW,CAE/BC,gBAAgB,CAAE,OAFa,CAG/BC,gBAAgB,CAAE,KAHa,CAAjC,CAMA,GAAMC,CAAAA,KAAK,0BACNC,aADM,EAETC,UAAU,CAAVA,mBAFS,CAGTN,MAAM,CAANA,MAHS,EAAX,C","sourcesContent":["import base from './base';\nimport components from './components';\nimport * as tools from './tools';\nimport type { StyledProps } from '../theme/types';\n//@ts-ignore\nimport type { ColorModeOptions } from './../core/color-mode/types';\nexport interface ComponentTheme {\n  baseStyle?: (props: any) => StyledProps | StyledProps;\n  sizes?: Record<string, ((props: any) => StyledProps) | StyledProps>;\n  variants?: Record<string, ((props: any) => StyledProps) | StyledProps>;\n  defaultProps?: Record<string, any>;\n}\nconst config: ColorModeOptions = {\n  useSystemColorMode: false, // TODO: implement this\n  initialColorMode: 'light',\n  accessibleColors: false,\n};\n\nconst theme = {\n  ...base,\n  components,\n  config,\n};\n\nexport type Theme = typeof theme & { fontConfig: any };\n\nexport interface ICustomTheme {}\n\nexport interface ITheme extends ICustomTheme, Omit<Theme, keyof ICustomTheme> {}\n\nexport { theme, tools as themeTools };\n\nexport { getColor } from './styled-system';\nexport { StyledProps } from './types';\n"]}